import mesa
from agent import InfoAgent
import random
import pdb

class InfoModel(mesa.Model):
    """A agent model with some number of agents"""
    
    height = 25 
    width = 25

    def __init__(
            self, 
            density,
            initial_outbreak,
            personality,
            message,
            include_sirens):

        self.density = density
        self.initial_outbreak = initial_outbreak
     
        self.personality = self.get_personality(personality.lower())

        self.include_sirens = include_sirens
        self.message = message

        self.schedule = mesa.time.RandomActivation(self)
        

        # Grid Size (agents) is equal and adjusts accordingly to the number of agents 
        self.grid = mesa.space.MultiGrid(self.height, self.width, torus=False)


        self.datacollector = mesa.datacollection.DataCollector(
            {
                "Unaware": lambda m: self.count_type(m, "Unaware"),
                "Informed": lambda m: self.count_type(m, "Informed"),
                "Disseminative": lambda m: self.count_type(m, "Disseminative"),
                "Panic": lambda m: self.count_type(m, "Panic"),
                "Exhausted": lambda m: self.count_type(m, "Exhausted"),
            }
        )
        # # density 65
        # if self.message == "65%":
           
        #     agent_locations = [(0, 0), (0, 1), (0, 3), (0, 4), (0, 6), (0, 8), (0, 10), (0, 12), (0, 13), (0, 14), (0, 16), (0, 17), (0, 18), (0, 20), (0, 22), (0, 23), (0, 24), (1, 0), (1, 1), (1, 2), (1, 3), (1, 6), (1, 8), (1, 9), (1, 10), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 19), (1, 20), (1, 21), (1, 23), (1, 24), (2, 0), (2, 3), (2, 6), (2, 7), (2, 8), (2, 11), (2, 12), (2, 14), (2, 15), (2, 16), (2, 18), (2, 19), (2, 22), (2, 23), (3, 0), (3, 1), (3, 2), (3, 4), (3, 5), (3, 10), (3, 11), (3, 12), (3, 14), (3, 15), (3, 16), (3, 20), (3, 22), (4, 0), (4, 1), (4, 3), (4, 4), (4, 5), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 14), (4, 15), (4, 16), (4, 17), (4, 19), (4, 22), (5, 1), (5, 3), (5, 5), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 15), (5, 16), (5, 18), (5, 19), (5, 20), (5, 21), (5, 22), (5, 23), (5, 24), (6, 0), (6, 1), (6, 2), (6, 5), (6, 7), (6, 8), (6, 10), (6, 12), (6, 13), (6, 16), (6, 17), (6, 18), (6, 20), (6, 21), (6, 23), (6, 24), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (7, 10), (7, 14), (7, 16), (7, 17), (7, 19), (7, 21), (7, 22), (7, 23), (7, 24), (8, 0), (8, 2), (8, 3), (8, 6), (8, 7), (8, 8), (8, 9), (8, 11), (8, 12), (8, 14), (8, 16), (8, 17), (8, 19), (8, 22), (9, 0), (9, 3), (9, 4), (9, 6), (9, 7), (9, 8), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 21), (9, 22), (9, 23), (10, 0), (10, 1), (10, 2), (10, 3), (10, 4), (10, 6), (10, 7), (10, 8), (10, 9), (10, 12), (10, 14), (10, 16), (10, 17), (10, 18), (10, 20), (10, 22), (10, 24), (11, 0), (11, 1), (11, 2), (11, 4), (11, 6), (11, 8), (11, 9), (11, 11), (11, 14), (11, 16), (11, 18), (11, 19), (11, 20), (11, 22), (11, 24), (12, 1), (12, 2), (12, 3), (12, 4), (12, 5), (12, 6), (12, 7), (12, 9), (12, 10), (12, 12), (12, 13), (12, 15), (12, 18), (12, 19), (12, 20), (12, 21), (12, 24), (13, 0), (13, 1), (13, 2), (13, 3), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 10), (13, 11), (13, 12), (13, 13), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 20), (13, 22), (13, 23), (13, 24), (14, 0), (14, 2), (14, 5), (14, 7), (14, 8), (14, 11), (14, 14), (14, 15), (14, 17), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (15, 0), (15, 1), (15, 2), (15, 3), (15, 4), (15, 8), (15, 9), (15, 11), (15, 13), (15, 15), (15, 16), (15, 18), (15, 19), (15, 21), (15, 24), (16, 0), (16, 1), (16, 2), (16, 3), (16, 4), (16, 5), (16, 6), (16, 9), (16, 10), (16, 11), (16, 13), (16, 14), (16, 15), (16, 16), (16, 17), (16, 18), (16, 20), (16, 22), (16, 23), (16, 24), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 9), (17, 10), (17, 12), (17, 13), (17, 14), (17, 15), (17, 16), (17, 17), (17, 19), (17, 20), (17, 21), (17, 23), (18, 0), (18, 1), (18, 4), (18, 6), (18, 7), (18, 8), (18, 9), (18, 10), (18, 11), (18, 14), (18, 15), (18, 17), (18, 18), (18, 20), (18, 21), (18, 24), (19, 0), (19, 1), (19, 2), (19, 3), (19, 5), (19, 6), (19, 7), (19, 8), (19, 9), (19, 10), (19, 11), (19, 12), (19, 13), (19, 15), (19, 17), (19, 19), (19, 21), (19, 24), (20, 0), (20, 1), (20, 2), (20, 6), (20, 7), (20, 8), (20, 9), (20, 10), (20, 11), (20, 12), (20, 14), (20, 15), (20, 18), (20, 22), (20, 24), (21, 0), (21, 1), (21, 3), (21, 4), (21, 5), (21, 6), (21, 8), (21, 9), (21, 12), (21, 15), (21, 19), (21, 20), (21, 21), (21, 22), (21, 23), (22, 1), (22, 4), (22, 5), (22, 7), (22, 8), (22, 10), (22, 11), (22, 12), (22, 14), (22, 15), (22, 16), (22, 18), (22, 19), (22, 21), (22, 22), (22, 23), (23, 0), (23, 1), (23, 2), (23, 3), (23, 5), (23, 8), (23, 11), (23, 12), (23, 13), (23, 15), (23, 18), (23, 19), (23, 20), (23, 21), (23, 22), (23, 23), 
        #     (23, 24), (24, 0), (24, 2), (24, 5), (24, 6), (24, 7), (24, 10), (24, 14), (24, 15), (24, 18), (24, 19), (24, 21), (24, 24)]
        
        # # density 80
        # elif self.message == "80%":
        #     agent_locations = [(0, 0), (0, 1), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 
        #     5), (1, 6), (1, 7), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 22), (1, 23), (1, 24), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16), (2, 18), (2, 19), (2, 20), (2, 21), (2, 23), (2, 24), (3, 0), (3, 1), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 12), (3, 13), (3, 14), (3, 15), (3, 16), (3, 17), 
        #     (3, 18), (3, 20), (3, 21), (3, 22), (3, 23), (3, 24), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 15), (4, 16), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (5, 1), (5, 2), (5, 3), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21), (5, 23), (5, 24), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 7), (6, 8), (6, 10), (6, 12), (6, 13), (6, 14), (6, 15), (6, 16), (6, 17), (6, 18), (6, 20), (6, 21), (6, 22), (6, 24), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (7, 11), (7, 14), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20), (7, 21), (7, 22), (7, 23), (7, 24), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 7), (8, 10), (8, 11), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 
        #     20), (8, 21), (8, 23), (8, 24), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11), (9, 14), (9, 16), (9, 19), (9, 20), (9, 21), (9, 23), (9, 24), (10, 0), (10, 1), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 10), (10, 11), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 22), (10, 23), (10, 24), (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 7), (11, 8), (11, 9), (11, 10), (11, 11), (11, 13), (11, 14), (11, 15), (11, 16), (11, 18), (11, 19), (11, 21), (11, 22), (11, 23), (11, 24), (12, 0), (12, 3), (12, 4), (12, 5), (12, 6), (12, 8), (12, 9), (12, 10), (12, 11), (12, 12), (12, 13), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 21), (12, 22), (12, 23), (13, 0), (13, 2), (13, 3), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 11), (13, 12), (13, 14), (13, 16), (13, 17), (13, 18), (13, 19), (13, 21), (13, 22), (13, 23), (13, 24), (14, 0), (14, 1), (14, 2), (14, 3), (14, 4), (14, 6), (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), (14, 12), (14, 13), (14, 14), (14, 16), (14, 17), (14, 18), (14, 20), (14, 21), (14, 23), (14, 24), (15, 0), (15, 1), (15, 2), (15, 4), (15, 5), (15, 6), (15, 8), (15, 9), (15, 10), (15, 11), (15, 12), (15, 13), (15, 14), (15, 15), (15, 16), (15, 17), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (16, 0), (16, 1), (16, 3), (16, 5), (16, 7), (16, 8), (16, 9), (16, 10), (16, 11), (16, 12), (16, 14), (16, 15), (16, 17), (16, 18), (16, 19), (16, 21), (16, 23), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 6), (17, 7), (17, 8), (17, 9), (17, 10), (17, 11), (17, 12), (17, 13), (17, 15), (17, 16), (17, 17), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (17, 24), (18, 0), (18, 4), (18, 5), (18, 6), (18, 7), (18, 9), (18, 10), (18, 11), (18, 12), (18, 13), (18, 14), (18, 16), (18, 17), (18, 18), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (19, 0), (19, 1), (19, 2), (19, 3), (19, 4), (19, 5), (19, 6), (19, 7), (19, 8), (19, 9), (19, 10), (19, 11), (19, 13), (19, 14), (19, 15), (19, 16), (19, 17), (19, 19), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (20, 0), (20, 1), (20, 3), (20, 4), (20, 6), (20, 7), (20, 8), (20, 9), (20, 10), (20, 11), (20, 12), (20, 13), (20, 14), (20, 15), (20, 16), (20, 17), (20, 21), (20, 22), (20, 23), (20, 24), (21, 0), (21, 1), (21, 2), (21, 4), (21, 5), (21, 6), (21, 7), (21, 8), (21, 9), (21, 10), (21, 11), (21, 13), (21, 14), (21, 15), (21, 16), (21, 17), (21, 18), (21, 20), (21, 21), (21, 22), (21, 23), (22, 1), (22, 2), (22, 3), (22, 4), (22, 5), (22, 6), (22, 7), (22, 8), (22, 9), (22, 10), (22, 11), (22, 12), (22, 13), (22, 14), (22, 15), (22, 16), (22, 17), (22, 19), (22, 20), (22, 21), (22, 23), (22, 24), (23, 0), (23, 1), (23, 2), (23, 6), (23, 7), (23, 8), (23, 9), (23, 10), (23, 11), (23, 12), (23, 14), (23, 15), (23, 16), (23, 17), (23, 18), (23, 19), (23, 20), (23, 22), (23, 24), (24, 1), (24, 2), (24, 3), (24, 5), (24, 6), (24, 7), (24, 8), (24, 9), (24, 11), (24, 13), (24, 14), (24, 16), (24, 17), (24, 18), (24, 19), (24, 20), (24, 21), (24, 22), (24, 23)]
       
        # # density 100
        # elif self.message == "100%":    
        agent_locations = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18), (0, 19), (0, 20), (0, 21), (0, 22), (0, 23), (0, 24), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (2, 19), (2, 20), (2, 21), (2, 22), (2, 23), (2, 24), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (3, 13), (3, 14), (3, 15), (3, 16), (3, 17), (3, 18), (3, 19), (3, 20), (3, 21), (3, 22), (3, 23), (3, 24), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 21), (4, 22), (4, 23), (4, 24), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (5, 16), (5, 17), (5, 18), (5, 19), (5, 20), (5, 21), (5, 22), (5, 23), (5, 24), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (6, 14), (6, 15), (6, 16), (6, 17), (6, 18), (6, 19), (6, 20), (6, 21), (6, 22), (6, 23), (6, 24), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20), (7, 21), (7, 22), (7, 23), (7, 24), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19), (8, 20), (8, 21), (8, 22), (8, 23), (8, 24), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (9, 11), (9, 12), 
            (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18), (9, 19), (9, 20), (9, 21), (9, 22), (9, 23), (9, 24), (10, 0), (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7), (10, 8), (10, 9), (10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 21), (10, 22), (10, 23), (10, 24), (11, 0), (11, 1), (11, 2), (11, 3), (11, 4), (11, 5), (11, 6), (11, 7), (11, 8), (11, 9), (11, 10), (11, 11), (11, 12), (11, 13), (11, 14), (11, 15), (11, 16), (11, 17), (11, 18), (11, 19), (11, 20), (11, 21), (11, 22), (11, 23), (11, 24), (12, 0), (12, 1), (12, 2), (12, 3), (12, 4), (12, 5), (12, 6), (12, 7), (12, 8), (12, 9), (12, 10), (12, 11), (12, 12), (12, 13), (12, 14), (12, 15), (12, 16), (12, 17), (12, 18), (12, 19), (12, 20), (12, 21), (12, 22), (12, 23), (12, 24), (13, 0), (13, 1), (13, 2), (13, 3), (13, 4), (13, 5), (13, 6), (13, 7), (13, 8), (13, 9), (13, 10), (13, 11), (13, 12), (13, 13), (13, 14), (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 21), (13, 22), (13, 23), (13, 24), (14, 0), (14, 1), (14, 2), (14, 3), (14, 4), (14, 5), (14, 6), (14, 7), (14, 8), (14, 9), (14, 10), (14, 11), (14, 12), (14, 13), (14, 14), (14, 15), (14, 16), (14, 17), (14, 18), (14, 19), (14, 20), (14, 21), (14, 22), (14, 23), (14, 24), (15, 0), (15, 1), (15, 2), (15, 3), (15, 4), (15, 5), 
            (15, 6), (15, 7), (15, 8), (15, 9), (15, 10), (15, 11), (15, 12), (15, 13), (15, 14), (15, 15), (15, 16), (15, 17), (15, 18), (15, 19), (15, 20), (15, 21), (15, 22), (15, 23), (15, 24), (16, 0), (16, 1), (16, 2), (16, 3), (16, 
            4), (16, 5), (16, 6), (16, 7), (16, 8), (16, 9), (16, 10), (16, 11), (16, 12), (16, 13), (16, 14), (16, 15), (16, 16), (16, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 23), (16, 24), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7), (17, 8), (17, 9), (17, 10), (17, 11), (17, 12), (17, 13), (17, 14), (17, 15), (17, 16), (17, 17), (17, 18), (17, 19), (17, 20), (17, 21), (17, 22), (17, 23), (17, 24), (18, 0), (18, 1), (18, 2), (18, 3), (18, 4), (18, 5), (18, 6), (18, 7), (18, 8), (18, 9), (18, 10), (18, 11), (18, 12), (18, 13), (18, 14), (18, 15), (18, 16), (18, 17), (18, 18), (18, 19), (18, 20), (18, 21), (18, 22), (18, 23), (18, 24), (19, 0), (19, 1), (19, 2), (19, 3), (19, 4), (19, 5), (19, 6), (19, 7), (19, 8), (19, 9), (19, 10), (19, 11), (19, 12), (19, 13), (19, 14), (19, 15), (19, 16), (19, 17), (19, 18), (19, 19), (19, 20), (19, 21), (19, 22), (19, 23), (19, 24), (20, 0), (20, 1), (20, 2), (20, 3), (20, 4), (20, 5), (20, 6), (20, 7), (20, 8), (20, 9), (20, 10), (20, 11), (20, 12), (20, 13), (20, 14), (20, 15), (20, 16), (20, 17), (20, 18), (20, 19), (20, 20), (20, 21), (20, 22), (20, 23), (20, 24), (21, 0), (21, 1), (21, 2), (21, 3), (21, 4), (21, 5), (21, 6), (21, 7), (21, 8), (21, 9), (21, 10), (21, 11), (21, 12), (21, 13), (21, 14), (21, 15), (21, 16), (21, 17), (21, 18), (21, 19), (21, 20), (21, 21), (21, 22), (21, 23), (21, 24), (22, 0), (22, 1), (22, 2), (22, 3), (22, 4), (22, 5), (22, 6), (22, 7), (22, 8), (22, 9), (22, 10), (22, 11), (22, 12), (22, 13), (22, 14), (22, 15), (22, 16), (22, 17), (22, 18), (22, 19), 
            (22, 20), (22, 21), (22, 22), (22, 23), (22, 24), (23, 0), (23, 1), (23, 2), (23, 3), (23, 4), (23, 5), (23, 6), (23, 7), (23, 8), (23, 9), (23, 10), (23, 11), (23, 12), (23, 13), (23, 14), (23, 15), (23, 16), (23, 17), (23, 18), (23, 19), (23, 20), (23, 21), (23, 22), (23, 23), (23, 24), (24, 0), (24, 1), (24, 2), (24, 3), (24, 4), (24, 5), (24, 6), (24, 7), (24, 8), (24, 9), (24, 10), (24, 11), (24, 12), (24, 13), (24, 14), (24, 15), (24, 16), (24, 17), (24, 18), (24, 19), (24, 20), (24, 21), (24, 22), (24, 23), (24, 24)]
        # else:
        #     agent_locations = [(x,y) for (contents, x, y) in self.grid.coord_iter() if self.random.random() < density]


        # Create Agents
        for (x,y) in agent_locations:
            agent = InfoAgent((x, y), self, self.personality, self.message, self.density)
  
            if self.include_sirens: # If you want all the corners to start.
                if (x,y) in [(0,0), (0,24), (24,0), (24,24)]:
                    agent.condition = "Informed"
                    agent.action_queue = [agent.try_disseminate]
            else: # This is the default start.
                if (x,y) == (0,0):
                    agent.condition = "Informed"
                    agent.action_queue = [agent.try_disseminate]
                
            self.grid.place_agent(agent, (x, y))
            self.schedule.add(agent)
 

        # Randomly infect some nodes
        for agent in self.sample_agents(agent_locations, self.initial_outbreak-1):
            agent.condition = "Informed"
            agent.action_queue = [agent.try_disseminate]


        # Heterogeneous agent distribution
        if personality.lower() == "heterogeneous":
            fractions = self.get_personality("heterogeneous")[1] 
            groups = list(fractions.keys())
            group_agents = {group: [] for group in groups}

            # Assign each agent to a group based on the fractions
            for agent in self.sample_agents(agent_locations,  len(agent_locations)):
                group = random.choices(groups, weights=list(fractions.values()))[0]
                group_agents[group].append(agent)

            # Assign each agent their respective personalty
            for group, agents in group_agents.items():
                for agent in agents:
                    agent.personality_name = group
                    agent.personality_values = self.get_personality(group)[1] 
                
                

        # # Test heterogeneous distribution
        # count_personality = {
        # 'confident': 0,
        # 'reserved': 0,
        # 'resilient': 0,
        # 'undercontrolled': 0,
        # 'overcontrolled': 0
        # }

        # for agent in self.grid.get_cell_list_contents(agent_locations):
        #     if agent.personality_name in count_personality:
        #         count_personality[agent.personality_name] += 1

        # for personality, count in count_personality.items():
        #     print(f"{personality}: {count}")


        self.running = True
        self.datacollector.collect(self)


    def step(self):
        self.schedule.step()
        # collect data
        self.datacollector.collect(self)
        # Halt if no more info
        if self.count_type(self, "Unaware") == 0: #and self.count_type(self, "Listening") == 0:
            self.running = False



# Helper functions

    def sample_agents(self, agent_locations, amount):
        return self.grid.get_cell_list_contents(self.random.sample(agent_locations, amount))

    def get_personality(self, type_name=None):
        personalities = {
            "confident": {'agreeableness': 0.5, 'openness': 0.6, 'conscientiousness': 0.5, 'extraversion': 0.6, 'neuroticism': 0.5},
            "reserved": {'agreeableness': 0.6, 'openness': 0.2, 'conscientiousness': 0.6, 'extraversion': 0.2, 'neuroticism': 0.2}, #confident
            "resilient": {'agreeableness': 0.8, 'openness': 0.4, 'conscientiousness': 0.8, 'extraversion': 0.8, 'neuroticism': 0.2},
            "undercontrolled": {'agreeableness': 0.2, 'openness': 0.4, 'conscientiousness': 0.2, 'extraversion': 0.4, 'neuroticism': 0.8},
            "overcontrolled": {'agreeableness': 0.3, 'openness': 0.3, 'conscientiousness': 0.4, 'extraversion': 0.2, 'neuroticism': 0.9}, #huso
            "heterogeneous": {'confident': 0.221, 'reserved': 0.2541, 'resilient': 0.1631, 'undercontrolled': 0.2401, 'overcontrolled': 0.1217}
        }
        return next((key, value) for key, value in personalities.items() if key == type_name)

      
    # Low: 0.2
    # Medium/Low: 0.3
    # Moderate: 0.4
    # Medium: 0.5
    # Moderately High/Positive: 0.6
    # Pronounced: 0.7
    # High: 0.8
    # pronounced: 0.9


    @staticmethod
    def count_type(model, person_condition):
        """
        Helper method to count agents in a given condition in a given model.
        """
        count = 0
        for agent in model.schedule.agents:
            if agent.condition == person_condition:
                count += 1
        return count

    @staticmethod
    def count_all(model):
        """
        Helper method to count agents in a given condition in a given model.
        """
        count = 0
        for agent in model.schedule.agents:
            count += 1
        return count